{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactorytestrami"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"AzureDatabricks_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks'"
		},
		"AzureDatabricks1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks1'"
		},
		"AzureSqlDatabase_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase'"
		},
		"DatabricksODBC_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DatabricksODBC'"
		},
		"DatabricksODBC_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'DatabricksODBC'"
		},
		"AzureDatabricks1_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0407-101744-zh4g8613"
		},
		"AzureSqlDatabase_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "demo-icecream.database.windows.net"
		},
		"AzureSqlDatabase_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "demo"
		},
		"AzureSqlDatabase_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminramy"
		},
		"DatabricksODBC_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "token"
		},
		"WeatherApi_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://weather.visualcrossing.com/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Main_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "API",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "WeatherApi_Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Azure_SQL_DB",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SalesTransactions_Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Silver_Processing_Notbook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "API",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Azure_SQL_DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/rami.moughrabi@paragonshift.com/Silver/Silver_Data_Processing"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etl_error_logs_sql",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Azure_SQL_DB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/rami.moughrabi@paragonshift.com/etl_error_notebook",
							"baseParameters": {
								"error_source": "sales_transactions",
								"error_message": {
									"value": "@activity('Azure_SQL_DB').output.errors[0].Message",
									"type": "Expression"
								},
								"pipeline_name": "SalesTransactions_Pipeline",
								"layer": "bronze",
								"additional_details": "there is Failure in SalesTransactions_Pipeline"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etl_error_logs_api",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "API",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/rami.moughrabi@paragonshift.com/etl_error_notebook",
							"baseParameters": {
								"error_source": "Weather_API",
								"error_message": {
									"value": "@activity('API').output.errors[0].Message",
									"type": "Expression"
								},
								"pipeline_name": "WeatherApi_Pipeline",
								"layer": "bronze",
								"additional_details": "there is Failure in WeatherApi_Pipeline"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Gold_Processing_Notbook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Silver_Processing_Notbook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/rami.moughrabi@paragonshift.com/Gold/gold_data_processing"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/WeatherApi_Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/SalesTransactions_Pipeline')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesTransactions_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sales Transactions Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Watermark Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'select *  from dbo.sales_transactions WHERE sales_date_time >''',\n  variables('watermark'),\n  ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SalesTransactions_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SalesTransactions_Target",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Sales Watermark Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "select Distinct watermark_value from icecreamdb.metadata_config.bronze_watermark \nWHERE table_name = 'sales_transactions'\nAND status = 'ACTIVE';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Databricks_Source",
								"type": "DatasetReference",
								"parameters": {
									"layer": "metadata_config.bronze_watermark"
								}
							}
						}
					},
					{
						"name": "Set Watermark Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Sales Watermark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "watermark",
							"value": {
								"value": "@string(activity('Sales Watermark Value').output.firstRow.watermark_value)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Sales Watermark New Value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Sales Transactions Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  select max(sales_date_time) sales_date_time from dbo.sales_transactions\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SalesTransactions_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Watermark New Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Sales Watermark New Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "watermar_new_value",
							"value": {
								"value": "@string(activity('Sales Watermark New Value').output.firstRow.sales_date_time)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Config Table",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Set Watermark New Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/rami.moughrabi@paragonshift.com/update_config_tables",
							"baseParameters": {
								"pipeline_name": "Sales_Transactions_Pipeline",
								"watermark_value": {
									"value": "@variables('watermar_new_value')",
									"type": "Expression"
								},
								"target_table": "bronze_watermark"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"watermark": {
						"type": "String"
					},
					"watermar_new_value": {
						"type": "String"
					},
					"test": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SalesTransactions_Source')]",
				"[concat(variables('factoryId'), '/datasets/SalesTransactions_Target')]",
				"[concat(variables('factoryId'), '/datasets/Databricks_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherApi_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Weather API Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Watermark Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "WaethereApi_Source",
								"type": "DatasetReference",
								"parameters": {
									"end_date": {
										"value": "@variables('watermark')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "WatherAPI_Target_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Weather Watermark Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "select Distinct cast(watermark_value AS DATE) AS watermark_value from icecreamdb.metadata_config.bronze_watermark \nWHERE table_name = 'weather_api'\nAND status = 'ACTIVE';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Databricks_Source",
								"type": "DatasetReference",
								"parameters": {
									"layer": "metadata_config.bronze_watermark"
								}
							}
						}
					},
					{
						"name": "Set Watermark Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Weather Watermark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "watermark",
							"value": {
								"value": "@string(activity('Weather Watermark Value').output.firstRow.watermark_value)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Watermark New Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Weather API Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "watermar_new_value",
							"value": {
								"value": "@string(utcNow())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Config Table",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Set Watermark New Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/rami.moughrabi@paragonshift.com/update_config_tables",
							"baseParameters": {
								"pipeline_name": "WeatherApi_Pipeline",
								"watermark_value": {
									"value": "@variables('watermar_new_value')",
									"type": "Expression"
								},
								"target_table": "bronze_watermark"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"watermark": {
						"type": "String"
					},
					"watermar_new_value": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WaethereApi_Source')]",
				"[concat(variables('factoryId'), '/datasets/WatherAPI_Target_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Databricks_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databricks_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DatabricksODBC",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"layer": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@concat('icecreamdb.',dataset().layer)",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DatabricksODBC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesTransactions_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "sales_transactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesTransactions_Target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(\n  'bronze/TransactionDB/',\n  utcNow('yyyy-MM-dd')\n)",
							"type": "Expression"
						},
						"container": "icecreamblob"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WaethereApi_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WeatherApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"end_date": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(\n  'VisualCrossingWebServices/rest/services/timeline/europe/',dataset().end_date,'/',\n   formatDateTime(utcNow(), 'yyyy-MM-dd'),\n   '?unitGroup=metric&include=hours&key=AB4UKRD5GE2JL7VLSV2VKNHCA&contentType=json'\n)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WeatherApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatherAPI_Target_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(\n  'bronze/API/',\n  utcNow('yyyy-MM-dd')\n)",
							"type": "Expression"
						},
						"container": "icecreamblob"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-4307413879141560.0.azuredatabricks.net",
					"clusterId": "0407-101744-zh4g8613",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks_accessToken')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4307413879141560.0.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks1_accessToken')]"
					},
					"existingClusterId": "[parameters('AzureDatabricks1_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatabricksODBC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Odbc",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('DatabricksODBC_connectionString')]"
					},
					"authenticationType": "Basic",
					"userName": "[parameters('DatabricksODBC_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('DatabricksODBC_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherApi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('WeatherApi_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"selfContainedInteractiveAuthoringEnabled": false
				}
			},
			"dependsOn": []
		}
	]
}